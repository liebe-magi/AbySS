WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT    =  { line_comment | block_comment }

line_comment  = _{ "//" ~ (!"\n" ~ ANY)* }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

statements = { SOI ~ statement* ~ EOI }
statement  = { (forge_var | engrave | unveil | reveal | orbit | orbit_flow | assignment | expression) ~ ";" }
block      = { "{" ~ statement* ~ "}" }

forge_var  = { "forge" ~ morph? ~ identifier ~ ":" ~ type ~ "=" ~ expression }
assignment = { postfix_expr ~ assignment_op ~ expression }

engrave        = { "engrave" ~ identifier ~ "(" ~ engrave_params? ~ ")" ~ ("->" ~ engrave_type)? ~ block }
engrave_params = { engrave_param ~ ("," ~ engrave_param)* }
engrave_param  = { identifier ~ ":" ~ type }
engrave_type   = { type }

unveil = { "unveil" ~ "(" ~ expression ~ ("," ~ expression)* ~ ")" }
reveal = { "reveal" ~ expression? }

oracle_expr             = { "oracle" ~ oracle_conditional? ~ "{" ~ oracle_branch* ~ "}" }
oracle_conditional      = { "(" ~ (conditional_assignments | expressions) ~ ")" }
conditional_assignments = { conditional_assignment ~ ("," ~ conditional_assignment)* }
conditional_assignment  = { identifier ~ "=" ~ expression }

oracle_branch = { pattern ~ "=>" ~ (block | statement) }
pattern       = { "(" ~ pattern_elements ~ ")" | "_" }

pattern_elements = { pattern_element ~ ("," ~ pattern_element)* }
pattern_element  = { expression | "_" }

orbit        = { "orbit" ~ orbit_params? ~ block }
orbit_params = { "(" ~ orbit_param ~ ("," ~ orbit_param)* ~ ")" }
orbit_param  = { identifier ~ "=" ~ range_expr }
range_expr   = { expression ~ range_op ~ expression }
range_op     = { "..=" | ".." }

orbit_flow  = { resume_expr | eject_expr }
resume_expr = { "resume" ~ identifier? }
eject_expr  = { "eject" ~ identifier? }

trans_expr  = { "trans" ~ "(" ~ expression ~ "as" ~ type ~ ")" }
summon_expr = { "summon" ~ "(" ~ rune ~ "," ~ type ~ ")" }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

type            =  { "omen" | "aether" | "arcana" | "rune" | "abyss" | collection_type }
omen            = @{ "boon" | "hex" }
aether          = @{ sign? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
arcana          = @{ sign? ~ ASCII_DIGIT+ }
rune            = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
collection_type =  { (arc_type | lex_type | syn_type) }
arc_type        =  { "arc" ~ "<" ~ type ~ ">" }
lex_type        =  { "lex" ~ "<" ~ type ~ "," ~ type ~ ">" }
syn_type        =  { "syn" ~ "<" ~ type ~ ">" }

sign  = { "+" | "-" }
morph = { "morph" }

expressions  = { expression ~ ("," ~ expression)* }
expression   = { oracle_expr | or_expr }
or_expr      = { and_expr ~ (or_op ~ and_expr)* }
and_expr     = { not_expr ~ (and_op ~ not_expr)* }
not_expr     = { not_op? ~ comp_expr }
comp_expr    = { add_expr ~ (comp_op ~ add_expr)? }
add_expr     = { mul_expr ~ (add_op ~ mul_expr)* }
mul_expr     = { pow_expr ~ (mul_op ~ pow_expr)* }
pow_expr     = { postfix_expr ~ (pow_op ~ postfix_expr)* }
postfix_expr = { primary_expr ~ (index_access | method_call)* }
primary_expr = { trans_expr | summon_expr | func_call | omen | aether | arcana | rune | identifier | collection_literal | "(" ~ expression ~ ")" }

func_call    = { identifier ~ "(" ~ func_args? ~ ")" }
func_args    = { expression ~ ("," ~ expression)* }
method_call  = { "." ~ identifier ~ "(" ~ func_args? ~ ")" }
index_access = { "[" ~ expression ~ "]" }

assignment_op = { "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "**=" | "=" }

comp_op = { "==" | "!=" | "<=" | ">=" | "<" | ">" }
add_op  = { "+" | "-" }
mul_op  = { "*" | "/" | "%" }
pow_op  = { "^" | "**" }
or_op   = { "||" }
and_op  = { "&&" }
not_op  = { "!" }

collection_literal = { arc_literal | lex_literal | syn_literal }
arc_literal        = { "[" ~ expressions? ~ "]" }
lex_literal        = { "{" ~ lex_pairs? ~ "}" }
syn_literal        = { "{" ~ expressions? ~ "}" }

lex_pairs = { lex_pair ~ ("," ~ lex_pair)* }
lex_pair  = { expression ~ ":" ~ expression }
